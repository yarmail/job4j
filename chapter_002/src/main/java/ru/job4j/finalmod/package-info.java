package ru.job4j.finalmod;

/*
2. final [#334073]

Данное ключевое слово можно применять для каждого
из следующих трех случаев:
1. Для переменных (как локальных, так и полей класса);
2. Для методов;
3. Для классов.
Рассмотрим каждый из трех случаев отдельно.

---

1. Final для переменных и полей
Если нам необходимо, чтобы после инициализации
переменной никто бы ее не смог изменить,
при объявлении просто нужно добавить ключевое слово "final",
например
static final String NAME = "Petr";

---

2. Final для методов.
К методам также можно применить модификатор final:
public final void printMark()
Что же означает использование методов
использование ключевого слова final?
Все очень просто - при наследовании данный метод
нельзя будет переопределить:

---

3. Final для классов.
Применять модификатор final можно и для классов
public final class Car
В данном случае будет обозначать,
что мы не сможем создать наследников этого класса
Из-за того, что класс объявлен как final, можно
в какой-то степени сказать, что и все его методы
тоже становятся final, поэтому вообще использовать
наследование в данном случае бессмысленно.

---
(!!!)
Важно подчеркнуть важную особенность
поведения ключевого слова final для ссылочных
типов данных - после присвоения объекта,
нельзя изменить ссылку на данный объект.
Однако при этом мы можем изменить внутреннее
состояние объекта.

---

Задание.
Представлен код, он содержит ряд ошибок компиляции.
Вам необходимо его исправить,
при этом сделать таким образом:
- класс Airbus нельзя было наследовать;
- метод printCountEngine() должен выводить
реальное количество двигателей,
которое присуще той или иной модели самолета.
Поэтому если модель самолета
A380 - количество двигателей должно равняться 4,
для всех остальных моделей -
используем в качестве значения константу
COUNT_ENGINE.
- чтобы не допускать дублирования
кода следует использовать дополнительную
переменную и тернарный оператор.
Код метода должен уместиться на двух строках.





















 */