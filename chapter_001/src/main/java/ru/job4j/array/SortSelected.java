package ru.job4j.array;

/**
 * 6.5.3. Сортировка выборкой. [#156320]
 * Сортировка является одной из базовых задач программирования.
 * Сортировка упорядочивает массив элементов по возрастанию
 * и убыванию.
 *
 * Искходный массив {3, 2, 1, 4, 5}.
 * Конечный массив {1, 2, 3, 4, 5}.
 *
 * В этом задании вам нужно реализовать сортировку методом выборки.
 * Смысл этого метода в поиске минимального элемента из оставшихся.
 *
 * Рассмотрим пример:
 * Дан массив {3, 5, 1, 2, 4}.
 * На первом этапе мы ищем минимальный элемент во всем массиве.
 * Минимальный элемент - это 1.
 * Меняем местами нулевой элемент и 2 элемент по индексу - это 1.
 * Получаем массив 1 5 3 2 4.
 *
 * Теперь повторяем процедуру поиска минимального элемента,
 * но ищем уже не с 0 элемента, а с элемента с индексом 1.
 * Делаем мы это потому, что в нулевой ячейке уже записан
 * минимальный элемент.
 *
 * То есть теперь меняем местами 5 и 2. Получаем массив 1 2 3 5 4.
 * Дальше повторяем операцию. На третьей операции
 * минимальный элемент стоит в нужной ячейке.
 * Дальше повторяем операцию.
 * Находим 4 и меняем местами с 5.
 * Пояснения
 *
 * находим минимум в текущем диапазоне
 * int min = MinDiapason.findMin(data, i, data.length - 1);
 *
 * находим индекс этого числа
 * int index = FindLoop.indexOf(data, min, i, data.length - 1);
 *
 * (тесты есть)
 */
public class SortSelected {
    public static int[] sort(int[] data) {
        for (int i = 0; i < data.length; i++) {
            int min = MinDiapason.findMin(data, i, data.length - 1);
            // находим индекс этого числа
            int index = FindLoop.indexOf(data, min, i, data.length - 1);
            SwitchArray.swap(data, i, index);
        }
        return data;
    }
}