package ru.job4j.streamaddress;

/**
 *
 *
 * 2. Список адресов [#110062]
 * В туристической компании появилась задача
 * составить список адресов клиентов.
 * В анкете у клиента, есть адрес проживания.
 * Анкета клиента описывается моделью Profile, Address
 *
 * Создать класс Profiles и метод List<Address> collect(List<Profile> profiles);
 * При решении задания нужно использовать Stream API, метод map,
 * метод collect(Collections.toList());
 * Метод Stream.map - принимает элемент потока и возвращает другой элемент.
 *
 * ======================
 * Уникальность элементов и сортировка. [#110225]
 * В задании про список адресов для турестической фирмы
 * пришло новое требование.
 * 1. Оказалось, что часть людей живет по одному и
 * тому же адресу.
 * Нужно в списке оставить только уникальные элементы.
 * 2. Для быстрого поиска по адресам список нужно
 * было отсортировать.
 *
 * Задание.
 * 1. Доработайте задание "Список Адресов", чтобы список элементов
 * был уникальный. А так же порядок элементов был отсортирован
 * по полю String city.
 * 2. Для этого чтобы обеспечить уникальность элементов
 * нужно использовать метод Stream#distinct();
 *
 * Пример для цифр.
 * System.out.println(
 *         List.of(1, 1, 2, 2).stream()
 *         .distinct().collect(Collectors.toList())
 * );
 *
 * Важно. чтобы сравнить объекты класса Address нужно в этом
 * классе определить два метода
 * equals hashCode.
 *
 * 3. Для сортировки нужно использовать метод
 * sorted(Comparator<Address>()).
 *
 * Примечание:
 *
 * Сортировать лучше прежде чем исключать дубликаты,
 * т.к. после сортировки дубликаты будут скапливаться
 * в начале, что облегчит их поиск, а также
 * ускорит работу программы.
 *
 */
